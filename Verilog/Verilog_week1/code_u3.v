//주석 종류
// 한 줄 주석
/*
여러줄 주석
*/

//연산자
a=~b; //~는 단항 연산자, B는 피연산자
a=b && c; //&&는 이항 연산자, b와c는 피연산자
a=b ? c : d; //?:는 삼항 연산자, b, c와 d는 피연산자

//수 표현
//크기 지정 가능 수
//<크기>'<기본형식><숫자>의 형식을 갖는다.

4'b1111 //4 비트 2진수
12'hbc //12 비트 16진수
16'd255 //16 비트 10진수

//크기 지정 불가능 수
//<기본형식> 지정하지 않을 경우 : 10 진수
//<크기>가 지정 되지 않을 경우 : 32비트
23456 //32 비트 10진수
'hc3 //32 비트 16진수
'o21 //32 비트 8진수

//X,Z값
//X : 알 수 없는 값
//Z : 하이 임피던스 값
//16진수에서 X 또는 Z는 4개의 비트를 정하고, 8진수는 3개의 비트, 2진수에서는 1개의 비트를 정한다.
12'h13x //12 비트 16진수; 마지막 4개 비트는 알 수 없는 값이다.
6'hx //6 비트 16진수
32'bz //32 비트 2진수; 하이 임피던스값이다.

//음수
//음수는 숫자의 <크기> 앞에 음수 보로를 붙인다.
-6'd3 //3의 2의 보수로써 음수
-6'sd3 //부호 있는 정수 계산에 사용

//언더스코어 문자와 물음표
12'd1111_0000_1010 //가독성을 높이기 위해 언더스코어 문자를 사용.
4'b10?? //4'b10zz와 동일.

//문자열
"hello Verilog World" //문자열
"a / b" //문자열

//식별자와 키워드
reg value; //reg는 키워드. value는 식별자
input clk; //input는 키워드. clk는 식별자

//에스케이프 식별자
//에스케이프 식별자는 백슬러쉬(\) 문자로 시작, 화이트스페이스(스페이스, 탭, 개행)로 끝남.
//에스케이프와 화이트 스페이스 사이에 있는 모든 문자들은 글자 그대로 처리 된다.
\a+b-c
\**my_name**

//논리 값 집합
//논리 값 :0, 1, x, z
/*신호강도(아래로 갈수록 낮아짐)
supply  흐름(driving) 
strong  흐름(driving) 
pull    흐름(driving) 
large   저장(storage)
week    흐름(driving) 
medium  저장(storage)
small   저장(storage)
highz   하이 임피던스
*/

//넷(Nets)
//넷은 하드웨어 요소 사이에 연결을 나타낸다.
wire a; //회로에서 넷 a를 정의
wire b,c; //회로에서 넷 b, c를 정의
wire d= 1'b0 // 넷 d는 논리값 0으로 선언

//레지스터
//레지스터는 데이터를 저장할 수 있는 변수이다.
//키워드 : reg 기본 논리 값 : x
reg reset; //값을 가질 수 있는 변수 reset 정의
initial 
begin
    reset = 1'b1 //디지털 회로에서 reset을 1로 초기화 한다.
    #100 reset = 1'b0; //100단위시간이 지난 뒤 reset값을 바꾼다.
end
reg signed [63:0] m; //64 비트 부호 있는 값
initial i; //32 비트 부호 있는 값

//벡터
//넷과 reg 데이터형은 벡터로 선언될 수 있다.
//벡터는 항상 왼쪽에 있는 것이 최상위 비트를 나다낸다.
wire a; //스칼라 넷 변수. 기본 값.
wire [7:0] bus; //8-비트 bus.
wire [31:0] busA, busB, busC; //32-비트의 폭을 가진 3개의 bus들.
reg clock; //스칼라 레지스터. 기본 값.
reg [0:40] virtural_addr; //41비트 폭을 가진 벡터 레지스터.
busA[7]; //벡터 busA의 7번 비트.
bus[2:0] //벡터 bus의 3개의 하위 비트, significant 비트는 범위지정에서 항상 왼쪽에 와야 되기 때문에 bus[0:2]로 사용하는 것은 안된다.
virtual_addr[0:1] //virtual_addr의 2개의 상위 비트.